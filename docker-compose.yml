version: "3.9"

services:
  db:
    image: postgres:15
    container_name: postgres
    env_file:
      - .env # Variables d'environnement pour PostgreSQL
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
      timeout: 5s
    restart: always
    networks:
      - app-network

  backend:
    build:
      context: ./src/backend
      dockerfile: ../../docker/backend/Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 10s
    command: >
      dockerize -wait tcp://db:5432 -wait tcp://redis:6379 -timeout 30s
      uvicorn app.main:app --host 0.0.0.0 --port 8000
    restart: always
    networks:
      - app-network

  frontend:
    build:
      context: ./src/frontend
      dockerfile: ../../docker/frontend/Dockerfile
    container_name: frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - app-network

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      frontend:
        condition: service_healthy
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      retries: 3
    restart: always
    networks:
      - app-network

  test-backend:
    build:
      context: ./docker/tests/backend # Tests backend dans docker/tests/backend
      dockerfile: Dockerfile
    container_name: test-backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/test_db
    command: ["pytest", "/app/tests"]

  test-frontend:
    build:
      context: ./docker/tests/frontend # Tests frontend dans docker/tests/frontend
      dockerfile: Dockerfile
    container_name: test-frontend
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    command: ["yarn", "test"]

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
